import json
from pathlib import Path
from shutil import copyfile
from typing import List
from typing import Tuple

import requests
from git import Repo
from moviepy.editor import VideoFileClip
from PIL import Image

CONTAINER_WIDTH: int = 928
CUT_WIDTH: int = 422
CUT_HEIGHT: int = 100
CARD_PADDING_TOP: int = 37
CARD_PADDING_HORIZONTAL: int = 16
CARD_PADDING_BOTTOM: int = 16
CARD_MARGIN_BOTTOM: int = 16
CARD_HEIGHT: int = CARD_PADDING_TOP + CUT_HEIGHT + CARD_PADDING_BOTTOM
Y_OFFSET: int = CARD_HEIGHT + CARD_MARGIN_BOTTOM
MINIMUM_HEIGHT: int = 3 * CARD_HEIGHT + 2 * CARD_MARGIN_BOTTOM

def getXY(index: int) -> Tuple[int, int]:
    isLeft: bool = index % 2 == 0
    x: int = CARD_PADDING_HORIZONTAL if isLeft else CONTAINER_WIDTH - (CARD_PADDING_HORIZONTAL + CUT_WIDTH)
    indexFromTop: int = index // 2
    y: int = CARD_PADDING_TOP + indexFromTop * Y_OFFSET
    return x, y

def cropImage(path: str) -> List[str]:
    try:
        image: Image.Image = Image.open(path)
        width, height = image.size
        resizeOpts: Tuple[int, int] = (CONTAINER_WIDTH, MINIMUM_HEIGHT) if width / height >= CONTAINER_WIDTH / MINIMUM_HEIGHT else (CONTAINER_WIDTH, height)
        resized: Image.Image = image.resize(resizeOpts)
        files: List[str] = []
        for i in range(6):
            filename: str = f"{Path(path).stem}.{i}{Path(path).suffix}"
            x, y = getXY(i)
            cropped: Image.Image = resized.crop((x, y, x + CUT_WIDTH, y + CUT_HEIGHT))
            cropped.save(filename)
            print(f"Successfully cropped {filename}")
            files.append(filename)
        return files
    except Exception as e:
        print(e)

def cropGif(path: str) -> List[str]:
    try:
        clip: VideoFileClip = VideoFileClip(path)
        width, height = clip.size
        dimension: float = width / height
        BASE_DIMENSION: float = CONTAINER_WIDTH / MINIMUM_HEIGHT
        isWider: bool = dimension >= BASE_DIMENSION
        resizeOpts: Tuple[int, int] = (CONTAINER_WIDTH, int(height * CONTAINER_WIDTH / width)) if isWider else (int(width * MINIMUM_HEIGHT / height), MINIMUM_HEIGHT)
        resized: VideoFileClip = clip.resize(resizeOpts)
        files: List[str] = []
        for i in range(6):
            filename: str = f"{Path(path).stem}.{i}.gif"
            x, y = getXY(i)
            cropped: VideoFileClip = resized.crop(y1=y, y2=y+CUT_HEIGHT, x1=x, x2=x+CUT_WIDTH)
            cropped.write_gif(filename)
            print(f"Successfully cropped {filename}")
            files.append(filename)
        return files
    except Exception as e:
        print(e)


def createGist(data: dict, githubToken: str) -> str:
    try:
        headers: dict = {
            'Authorization': f'token {githubToken}',
            'Accept': 'application/vnd.github+json'
        }
        response: requests.Response = requests.post('https://api.github.com/gists', headers=headers, data=json.dumps(data))
        res_json = response.json()
        print(f"Successfully created {res_json['html_url']}")
        return res_json['id']
    except Exception as e:
        print(e)

def updateGist(gist_hash: str, image_file: str):
    try:
        repo = Repo.clone_from(f'git@gist.github.com:{gist_hash}.git', f'./{gist_hash}')
        copyfile(f"./{image_file}", f"./{gist_hash}/{image_file}")
        repo.index.add([f"{image_file}"])
        repo.index.commit('post image file to gist')
        origin = repo.remote()
        origin.push()
        print("Successfully posted image to gist")
    except Exception as e:
        print(e)

def createGists(files: List[str], githubToken: str) -> None:
    for file in files:
        data: dict = {
            "description": f"Gist for {file}. Generated by `image2grid`.",
            "public": True, # in order to pin
            "files": {
                file: {
                    "content": 'placeholder'
                }
            }
        }
        gist_hash = createGist(data, githubToken)
        updateGist(gist_hash, file)

def crop(path: str, githubToken: str) -> None:
    try:
        files: List[str] = cropGif(path) if path.endswith(".gif") else cropImage(path)
        if githubToken:
            createGists(files, githubToken)
    except Exception as e:
        print(e)

